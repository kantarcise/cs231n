Metadata-Version: 2.4
Name: cs231n
Version: 0.1.0
Summary: CS231n assignments and lecture notes
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: mkdocs>=1.5.0
Requires-Dist: mkdocs-material>=9.5.0
Requires-Dist: pymdown-extensions>=10.0
Dynamic: license-file

# cs231n

My solutions (and more) for CS231n Assingments in 2022.

## Notes

The `docs/` directory now contains my CS231n lecture notes exported from Obsidian and structured for [MkDocs](https://www.mkdocs.org/). Dependency management is handled with [uv](https://docs.astral.sh/uv/) via `pyproject.toml`. To work on the notes locally:

```bash
uv sync
uv run mkdocs serve
```

This creates a local virtual environment, installs MkDocs plus the plugins, and launches a live preview at `http://127.0.0.1:8000/` with navigation for every Winter 2016 lecture.

Here is [the link](https://cs231n.github.io/assignments2022/assignment1/) for them. Use assignment2 and assignment3 for the other urls.

## Assingment 1

In this assignment you will practice putting together a simple image classification pipeline based on the k-Nearest Neighbor or the SVM/Softmax classifier. The goals of this assignment are as follows:

- Understand the basic **Image Classification pipeline** and the data-driven approach (train/predict stages).
- Understand the train/val/test **splits** and the use of validation data for **hyperparameter tuning**.
- Develop proficiency in writing efficient **vectorized** code with numpy.
- Implement and apply a k-Nearest Neighbor (**kNN**) classifier.
- Implement and apply a Multiclass Support Vector Machine (**SVM**) classifier.
- Implement and apply a **Softmax** classifier.
- Implement and apply a **Two layer neural network** classifier.
- Understand the differences and tradeoffs between these classifiers.
- Get a basic understanding of performance improvements from using **higher-level representations** as opposed to raw pixels, e.g. color histograms, Histogram of Oriented Gradient (HOG) features, etc.

### Q0: numpy-review:
The notebook [`numpy_review.ipynb`](https://github.com/kantarcise/cs231n/blob/main/src/assignment1/numpy_review.ipynb) is there for you to discover some basic usage of Numpy!

### Q1: k-Nearest Neighbor classifier
The notebook [`knn.ipynb`](https://github.com/kantarcise/cs231n/blob/main/src/assignment1/knn.ipynb) will walk you through implementing the kNN classifier.

### Q2: Training a Support Vector Machine
The notebook [`svm.ipynb`](https://github.com/kantarcise/cs231n/blob/main/src/assignment1/svm.ipynb) will walk you through implementing the SVM classifier.

### Q3: Implement a Softmax classifier
The notebook [`softmax.ipynb`](https://github.com/kantarcise/cs231n/blob/main/src/assignment1/softmax.ipynb) will walk you through implementing the Softmax classifier.

### Q4: Two-Layer Neural Network
The notebook [`two_layer_net.ipynb`](https://github.com/kantarcise/cs231n/blob/main/src/assignment1/two_layer_net.ipynb) will walk you through the implementation of a two-layer neural network classifier.

### Q5: Higher Level Representations: Image Features
The notebook [`features.ipynb`](https://github.com/kantarcise/cs231n/blob/main/src/assignment1/features.ipynb) will examine the improvements gained by using higher-level representations as opposed to using raw pixel values.
